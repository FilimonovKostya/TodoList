{"version":3,"sources":["AddItemForm.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trim","addItem","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","Todolist","removeTodoList","todoID","tasks","map","f","id","type","checked","isDone","newIsDone","changeCheckbox","removeTask","filter","changeFilter","App","todoListId1","v1","todoListId2","todoLists","setTodoList","setTasks","todoListID","todoListTasks","t","task","taskIsDone","find","todolistID","todoList","tl","newTodolistID","newTodoList","allTodoListTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b9da3c68.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\n\r\n type AddItemFormPropsType = {\r\n     addItem: (title: string) => void\r\n }\r\n\r\nexport const AddItemForm = (props:AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    const addTask = () => {\r\n\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n            setError(null)\r\n        } else {\r\n            setError('Title is required')\r\n            setTitle('')\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n\r\n        if (e.key === 'Enter') {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? 'error' : ''}\r\n            />\r\n\r\n            <button onClick={addTask}>+</button>\r\n\r\n            {error && <div className={'error-message'}>{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeFilter: (value: FilterType, todolistID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeCheckbox: (id: string, taskIsDone: boolean, todoListID: string) => void\r\n    todoID: string\r\n    filter: FilterType\r\n    removeTodoList: (id: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoID)\r\n    }\r\n\r\n    const changeFilterAll = () => props.changeFilter('all', props.todoID)\r\n    const changeFilterActive = () => props.changeFilter('active', props.todoID)\r\n    const changeFilterComplete = () => props.changeFilter('completed', props.todoID)\r\n\r\n    return <div>\r\n        <h3>{props.title}\r\n            <button onClick={() => props.removeTodoList(props.todoID)}>X</button>\r\n        </h3>\r\n        <div>\r\n            <AddItemForm addItem={addTask}/>\r\n        </div>\r\n        <ul>\r\n            {\r\n                props.tasks.map(f => {\r\n\r\n                    const changeCheckboxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDone = e.currentTarget.checked\r\n                        props.changeCheckbox(f.id, newIsDone, props.todoID)\r\n\r\n                    }\r\n\r\n                    return (\r\n                        <li key={f.id}><input type=\"checkbox\" checked={f.isDone} onChange={changeCheckboxHandler}/><span>{f.title}</span>\r\n                            <button onClick={() => props.removeTask(f.id, props.todoID)}>X</button>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? 'button' : ''} onClick={changeFilterAll}>All</button>\r\n            <button className={props.filter === 'active' ? 'button' : ''} onClick={changeFilterActive}>Active</button>\r\n            <button className={props.filter === 'completed' ? 'button' : ''} onClick={changeFilterComplete}>Completed</button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist, TaskType} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todoListId1 = v1()\r\n    let todoListId2 = v1()\r\n\r\n    type TodolistType = {\r\n        id: string\r\n        title: string\r\n        filter: FilterType\r\n    }\r\n    let [todoLists, setTodoList] = useState<Array<TodolistType>>([\r\n        {id: todoListId1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListId2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Sql\", isDone: true},\r\n            {id: v1(), title: \"Mocha\", isDone: true},\r\n            {id: v1(), title: \"Native\", isDone: false},\r\n        ],\r\n        [todoListId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Bread\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    function removeTask(id: string, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID] // достали нужный массив ТудуЛиста\r\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== id)//перезаписали  и оттфильтровали\r\n        setTasks({...tasks})//сетаем и перерерисовываем\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        let task = {id: v1(), title: title, isDone: false}\r\n        let todoListTasks = tasks[todoListID] // достали нужный\r\n        tasks[todoListID] = [task, ...todoListTasks] // перезапись\r\n        setTasks({...tasks}) // переррисовка\r\n    }\r\n\r\n\r\n    function changeCheckbox(id: string, taskIsDone: boolean, todoListID: string) {\r\n        let todoListTasks = tasks[todoListID]\r\n        let task = todoListTasks.find(t => t.id === id) //нашли нужную таску\r\n        if (task) {\r\n            task.isDone = taskIsDone // перезаписываем значение\r\n            setTasks({...tasks})//перерисока\r\n        }\r\n    }\r\n\r\n\r\n    function changeFilter(value: FilterType, todolistID: string) {\r\n        let todoList = todoLists.find(tl => tl.id === todolistID)\r\n        if (todoList) {\r\n            todoList.filter = value\r\n            setTodoList([...todoLists])\r\n        }\r\n\r\n    }\r\n\r\n    function removeTodoList(id: string) {\r\n        setTodoList(todoLists.filter(tl => tl.id !== id))\r\n        delete tasks[id]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let newTodolistID = v1()\r\n        let newTodoList: TodolistType = {\r\n            id: newTodolistID,\r\n            title: title,\r\n            filter: 'all'\r\n        }\r\n        setTodoList([...todoLists, newTodoList])\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodolistID]: []\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList}/>\r\n            {todoLists.map(tl => {\r\n                let allTodoListTasks = tasks[tl.id]\r\n                let tasksForTodolist = allTodoListTasks\r\n\r\n\r\n                if (tl.filter === 'active') {\r\n                    tasksForTodolist = allTodoListTasks.filter(f => f.isDone)\r\n\r\n                }\r\n                if (tl.filter === 'completed') {\r\n                    tasksForTodolist = allTodoListTasks.filter(f => !f.isDone)\r\n\r\n                }\r\n\r\n                return <Todolist title={tl.title}\r\n                                 key={tl.id}\r\n                                 todoID={tl.id}\r\n                                 removeTodoList={removeTodoList}\r\n\r\n                                 tasks={tasksForTodolist}\r\n                                 removeTask={removeTask}\r\n                                 changeFilter={changeFilter}\r\n                                 addTask={addTask}\r\n                                 changeCheckbox={changeCheckbox}\r\n                                 filter={tl.filter}\r\n                />\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
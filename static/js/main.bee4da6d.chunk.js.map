{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/Login/authReducer.ts","app/app-reducer.ts","components/ErrorSnackBar/ErrorSnackBar.tsx","state/todolist-reducer.ts","api/task-api.ts","state/tasks-reducers.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/Todolist.tsx","features/Todolists/TodolistList.tsx","features/Login/Login.tsx","app/App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","Axios","create","baseURL","withCredentials","headers","todolistAPI","updateTodolist","todolistID","title","put","deleteTodoList","delete","createTodoList","post","getTodoList","get","authAPI","loginData","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","Alert","props","elevation","variant","ErrorSnackBar","React","useState","setOpen","useSelector","state","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","taskAPI","getTask","todoListID","createTask","deleteTask","taskID","updateTask","model","createTaskTC","todolistId","then","res","resultCode","task","item","addTaskAC","catch","updateTaskTC","taskId","domainModule","getState","tasks","find","t","id","Error","apiModel","deadline","description","priority","startDate","updateTaskAC","AddItemForm","memo","setTitle","setError","addTask","trim","addItem","TextField","label","onChange","e","currentTarget","onKeyPress","key","helperText","disabled","IconButton","onClick","color","EditableSpan","editMode","setEditMode","onBlur","autoFocus","Task","onChangeTitle","useCallback","newValue","todoID","changeTaskTitle","Checkbox","checked","Completed","newIsDone","New","aria-label","removeTask","Todolist","useEffect","items","setTaskAC","changeTodoListTitle","newTitle","changeFilterAll","changeFilter","changeFilterActive","changeFilterComplete","tasksForTodolist","filter","f","entifyStatus","removeTodoList","map","changeCheckbox","changeStatus","Button","TodolistList","demo","todoLists","todolists","auth","thunk","removeTaskTC","changeTitleTodoListAC","removeTodoListAC","addTodoList","todoList","createTodoListTC","Grid","style","padding","container","spacing","tl","allTodolistTasks","Paper","entityStatus","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","name","getFieldProps","touched","FormControlLabel","control","handleBlur","App","history","useHistory","className","AppBar","position","Toolbar","Typography","push","LinearProgress","Container","fixed","path","render","exact","from","rootReducer","combineReducers","action","copyState","forEach","todoListId","store","createStore","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.bee4da6d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import Axios from \"axios\";\r\n\r\nconst instance = Axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a918abd3-e56d-4f51-9680-86b073810b9f'\r\n    }\r\n})\r\n\r\nexport const todolistAPI = () => {\r\n    return {\r\n        updateTodolist(todolistID: string, title: string) {\r\n            return instance.put<ResponseType<{}>>(`todo-lists/${todolistID}`, {title})\r\n        },\r\n        deleteTodoList(todolistID: string) {\r\n            return instance.delete<ResponseType<{}>>(`todo-lists/${todolistID}`)\r\n        },\r\n        createTodoList(title: string) {\r\n            return instance.post<ResponseType<{ item: TodoListType }>>(`todo-lists`, {title})\r\n        },\r\n        getTodoList() {\r\n            return instance.get<Array<TodoListType>>(`todo-lists`)\r\n        }\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(loginData: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>(`auth/login`, {...loginData})\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<AuthType>>(`auth/me`)\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n//Types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: boolean\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\ntype AuthType = {\r\n    id:number\r\n    email:string\r\n    login:string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n","import { Dispatch } from 'redux';\r\nimport {ResponseType} from '../api/todolist-api'\r\nimport {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch< ReturnType<typeof setAppStatusAC> | ReturnType<typeof setAppErrorAC>>","import {Dispatch} from 'redux'\r\nimport {setAppErrorAC, setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof setAppStatusAC> | ReturnType<typeof setAppErrorAC>\r\n","import {setIsLoggedInAC} from \"../features/Login/authReducer\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized:boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'succeeded',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-INITIALIZE\":\r\n            return {...state, isInitialized:action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppInitializeAC = (isInitialized:boolean) => ({type: 'APP/SET-INITIALIZE', isInitialized} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('loading'))\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n                dispatch(setAppInitializeAC(true));\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\n\r\n\r\ntype ActionsType = ReturnType<typeof setAppStatusAC> | ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppInitializeAC>","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackBar() {\r\n    const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setOpen(false)\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {todolistAPI, TodoListType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\n\r\nexport type FilterType = \"all\" | \"active\" | \"completed\";\r\n\r\n\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type ActionType =\r\n    | ReturnType<typeof removeTodoListAC>\r\n    | ReturnType<typeof addTodoListAC>\r\n    | ReturnType<typeof changeTitleTodoListAC>\r\n    | ReturnType<typeof changeFilterTodoListAC>\r\n    | ReturnType<typeof setTodoListsAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todoListReducer = (state: Array<TodoListDomainType> = initialState, action: ActionType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case \"SET-TODOLISTS\":\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(f => f.id !== action.todolistID)\r\n        case \"ADD-TODOLIST\" :\r\n            return [{ ...action.todoList, filter: 'all', entityStatus: 'idle' }, ...state]\r\n        case 'CHANGING-TITLE-TODOLIST' :\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGED-FILTER-TODOLIST':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TODOLIST-ENTIFY-STATUS\":\r\n            return state.map(tl => tl.id === action.todoID ? {...tl, entityStatus: action.entifyStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n//Actions\r\nexport const removeTodoListAC = (todolistID: string) => ({type: \"REMOVE-TODOLIST\", todolistID} as const)\r\nexport const addTodoListAC = (todoList: TodoListType) => ({type: \"ADD-TODOLIST\", todoList} as const)\r\nexport const changeTitleTodoListAC = (title: string, id: string) => ({type: \"CHANGING-TITLE-TODOLIST\", title, id} as const)\r\nexport const changeFilterTodoListAC = (filter: FilterType, id: string) => ({type: \"CHANGED-FILTER-TODOLIST\", filter, id} as const)\r\nexport const setTodoListsAC = (todoLists: TodoListType[]) => ({type: \"SET-TODOLISTS\", todoLists} as const)\r\nexport const changeTodolistEntityStatusAC = (entifyStatus: RequestStatusType, todoID: string) => ({\r\n    type: 'CHANGE-TODOLIST-ENTIFY-STATUS',\r\n    entifyStatus,\r\n    todoID\r\n} as const)\r\n\r\n//ThunkCreator\r\nexport const setTodoListsTC = () => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI().getTodoList()\r\n        .then(res => {\r\n            dispatch(setTodoListsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTodoListTC = (todolistID: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC('loading', todolistID))\r\n    todolistAPI().deleteTodoList(todolistID)\r\n        .then(() => {\r\n            dispatch(removeTodoListAC(todolistID))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const createTodoListTC = (title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI().createTodoList(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                debugger\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some Error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const changeTitleTodoListTC = (todolistID: string, title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI().updateTodolist(todolistID, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTitleTodoListAC(title, todolistID))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some Error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}\r\n\r\n\r\n","import Axios from \"axios\";\r\nimport {ResponseType, TaskType} from './todolist-api'\r\nimport {UpdateDomainTaskModelType} from \"../state/tasks-reducers\";\r\n\r\ntype ResponseTaskType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\ntype UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\nconst instance = Axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a918abd3-e56d-4f51-9680-86b073810b9f'\r\n    }\r\n})\r\n\r\n\r\nexport const taskAPI = () => {\r\n    return {\r\n        getTask(todoListID: string) {\r\n            return instance.get<ResponseTaskType>(`${todoListID}/tasks`)\r\n        },\r\n        createTask(todolistID: string, title: string) {\r\n            return instance.post<ResponseType<{ item: TaskType }>>(`${todolistID}/tasks`, {title})\r\n        },\r\n        deleteTask(todolistID: string, taskID: string) {\r\n            return instance.delete(`${todolistID}/tasks/${taskID}`)\r\n        },\r\n        updateTask(todolistID: string, taskID: string, model: UpdateDomainTaskModelType) {\r\n\r\n            return instance.put<ResponseType<{ item: UpdateTaskType }>>(`${todolistID}/tasks/${taskID}`, model)\r\n        }\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport {taskAPI} from \"../api/task-api\";\r\nimport {addTodoListAC, FilterType, setTodoListsAC} from \"./todolist-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType} from \"../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>;\r\n};\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setTodoListsAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof addTodoListAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof changeFilterTaskAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TASK\":\r\n            return {...state, [action.todoListID]: action.tasks}\r\n        case \"SET-TODOLISTS\": {\r\n            const copyState = {...state}\r\n            action.todoLists.forEach(tl => copyState[tl.id] = [])\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case \"REMOVE-TASK\":\r\n            return {...state, [action.todoListID]: state[action.todoListID].filter(t => t.id !== action.id)}\r\n        case \"UPDATE-TASK\":\r\n            return {...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.id ? {...t, ...action.model} : t)}\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todoList.id]: []}\r\n        case \"REMOVE-TODOLIST\":\r\n            delete state[action.id]\r\n            return {...state}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const removeTaskAC = (id: string, todoListId: string) => ({type: \"REMOVE-TASK\", id: id, todoListID: todoListId} as const)\r\nexport const updateTaskAC = (todolistId: string, id: string, model: UpdateDomainTaskModelType) => ({type: \"UPDATE-TASK\", todolistId, id, model} as const)\r\nexport const changeTaskTitleAC = (todolistID: string, id: string, title: string) => ({type: \"CHANGE-TITLE-TASK\", todolistID, id, title} as const)\r\n// export const addTodolistAC = (title: string) => ({type: \"ADD-TODOLIST\", title, todoListID: v1()} as const)\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const changeFilterTaskAC = (id: string, todolistID: string, newFilter: FilterType) => ({type: \"CHANGE-FILTER-TASK\", todolistID, id, newFilter} as const)\r\nexport const setTaskAC = (todoListID: string, tasks: Array<TaskType>) => ({type: \"SET-TASK\", todoListID, tasks} as const)\r\n\r\n\r\n//THUNK CREATOR\r\nexport const setTaskTC = (todoListID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI().getTask(todoListID)\r\n        .then(res => {\r\n            const tasks = res.data.items\r\n            dispatch(setTaskAC(todoListID, tasks))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n\r\n}\r\nexport const removeTaskTC = (todoListID: string, taskID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI().deleteTask(todoListID, taskID)\r\n        .then(() => {\r\n            dispatch(removeTaskAC(taskID, todoListID))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n\r\n}\r\nexport const createTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI().createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, todolistId: string, domainModule: UpdateDomainTaskModelType) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n    const state = getState()\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n        throw  new Error('Task not found')\r\n    }\r\n    const apiModel: UpdateDomainTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...domainModule\r\n    }\r\n\r\n    if (task) {\r\n        dispatch(setAppStatusAC('loading'))\r\n        taskAPI().updateTask(todolistId, taskId, {...apiModel})\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(todolistId, taskId, {...apiModel}))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC('Some error occurred'))\r\n                    }\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error.message, dispatch)\r\n            })\r\n    }\r\n\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled:boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    const addTask = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n            setError(null)\r\n        } else {\r\n            setError('Title is required')\r\n            setTitle('')\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === 'Enter') {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField value={title}\r\n                       variant={\"outlined\"}\r\n                       label={'Type value'}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       disabled={props.disabled}\r\n            />\r\n\r\n            <IconButton onClick={addTask} color=\"primary\" disabled={props.disabled}>\r\n                <ControlPointIcon />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onClick={activateEditMode}> {props.title} </span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {updateTaskTC,} from \"../../../../state/tasks-reducers\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\nexport type TaskPropsType = {\r\n    changeCheckbox: (id: string, todoListID: string, status: TaskStatuses) => void\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todoListID: string) => void\r\n    todoID: string\r\n    task: TaskType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const changeCheckboxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDone = e.currentTarget.checked\r\n        dispatch(updateTaskTC(props.task.id, props.todoID, {status: newIsDone ? TaskStatuses.Completed : TaskStatuses.New}))\r\n        // dispatch(updateTaskAC(props.todoID, props.task.id, {status: newIsDone ? TaskStatuses.Completed : TaskStatuses.New}))\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeTitle = useCallback((newValue: string) => {\r\n        dispatch(updateTaskTC(props.task.id, props.todoID, {title: newValue}))\r\n\r\n    }, [props.task.id, props.todoID, props.changeTaskTitle])\r\n\r\n\r\n    return <div key={props.task.id}><Checkbox checked={props.task.status === TaskStatuses.Completed} onChange={changeCheckboxHandler}/>\r\n        <EditableSpan title={props.task.title} onChange={onChangeTitle}/>\r\n        <IconButton aria-label=\"delete\">\r\n            <DeleteIcon onClick={() => props.removeTask(props.task.id, props.todoID)}/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from 'react';\r\n\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {Task} from \"./Task/Task\";\r\nimport {createTodoListTC, FilterType} from '../../../state/todolist-reducer';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {createTaskTC, setTaskTC} from \"../../../state/tasks-reducers\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\r\n\r\n\r\ntype PropsType = {\r\n    entifyStatus:RequestStatusType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeFilter: (value: FilterType, todolistID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeStatus: (id: string, todoListID: string, status: TaskStatuses) => void\r\n    todoID: string\r\n    filter: FilterType\r\n    removeTodoList: (id: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todoListID: string) => void\r\n    changeTodoListTitle: (todoId: string, newTile: string) => void\r\n    demo?:boolean\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\ndebugger\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTaskTC(props.todoID))\r\n    }, [props.todoID])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n      dispatch(createTaskTC(title, props.todoID))\r\n    }, [ props.todoID])\r\n\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        props.changeTodoListTitle(props.todoID, newTitle)\r\n    }, [props.todoID, props.changeTodoListTitle])\r\n\r\n    const changeFilterAll = useCallback(() => props.changeFilter('all', props.todoID), [props.changeFilter, props.todoID])\r\n    const changeFilterActive = useCallback(() => props.changeFilter('active', props.todoID), [props.changeFilter, props.todoID])\r\n    const changeFilterComplete = useCallback(() => props.changeFilter('completed', props.todoID), [props.changeFilter, props.todoID])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter((f) => f.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter((f) => f.status === TaskStatuses.Completed);\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodoListTitle}/>\r\n            <IconButton aria-label=\"delete\" disabled={props.entifyStatus === 'loading'}>\r\n                <DeleteIcon onClick={() => props.removeTodoList(props.todoID)}/>\r\n            </IconButton>\r\n        </h3>\r\n        <div>\r\n            <AddItemForm addItem={addTask} disabled={props.entifyStatus === 'loading'}/>\r\n        </div>\r\n        <ul>\r\n            {\r\n\r\n                tasksForTodolist.map(f => <Task task={f}\r\n                                                changeCheckbox={props.changeStatus}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                removeTask={props.removeTask}\r\n                                                todoID={props.todoID}\r\n                                                key={f.id}\r\n                />)\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? 'contained' : 'text'} onClick={changeFilterAll}>All</Button>\r\n            <Button variant={props.filter === 'active' ? 'contained' : 'text'} color={\"primary\"}\r\n                    onClick={changeFilterActive}>Active</Button>\r\n            <Button variant={props.filter === 'completed' ? 'contained' : 'text'} color={\"secondary\"}\r\n                    onClick={changeFilterComplete}>Completed</Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {\r\n    changeFilterTodoListAC,\r\n    changeTitleTodoListTC,\r\n    createTodoListTC,\r\n    removeTodoListTC,\r\n    setTodoListsTC,\r\n    TodoListDomainType\r\n} from \"../../state/todolist-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {createTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"../../state/tasks-reducers\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {FilterType} from \"../../app/App\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistList = ({demo = false}: PropsType) => {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(setTodoListsTC())\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todoListID: string) => {\r\n        const thunk = removeTaskTC(todoListID, id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((todoListID: string, title: string) => {\r\n        dispatch(createTaskTC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, todoListID: string, status: TaskStatuses) => {\r\n        dispatch(updateTaskTC(id, todoListID, {status}))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterType, todolistID: string) => {\r\n        dispatch(changeFilterTodoListAC(value, todolistID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, todolistID: string, title: string) => {\r\n\r\n        dispatch(updateTaskTC(id, todolistID, {title}))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((id: string, newTitle: string) => {\r\n        dispatch(changeTitleTodoListTC(id, newTitle))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((id: string) => {\r\n        dispatch(removeTodoListTC(id))\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(createTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid style={{padding: '15px'}}>\r\n            <AddItemForm addItem={addTodoList} disabled={status === 'loading'}/>\r\n        </Grid>\r\n        <Grid container={true} spacing={5}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    return (\r\n\r\n                        <Grid item={true} key={tl.id}> {/* //ячейки*/}\r\n                            <Paper style={{padding: '15px'}} elevation={3}>\r\n                                <Todolist entifyStatus={tl.entityStatus}\r\n                                          title={tl.title}\r\n                                          tasks={allTodolistTasks}\r\n                                          removeTask={removeTask}\r\n                                          changeFilter={changeFilter}\r\n                                          addTask={addTask}\r\n                                          changeStatus={changeStatus}\r\n                                          todoID={tl.id}\r\n                                          filter={tl.filter}\r\n                                          removeTodoList={removeTodoList}\r\n                                          changeTaskTitle={changeTaskTitle}\r\n                                          changeTodoListTitle={changeTodoListTitle}\r\n                                          demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n\r\n\r\n}","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password should be more than 3 symbols';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC({...values}))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name={'email'}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? (\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                        ) : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            name={'password'}\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? (\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                        ) : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox name={'rememberMe'} onBlur={formik.handleBlur} {...formik.getFieldProps('rememberMe')} />}\r\n                        />\r\n\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n\r\n                </FormGroup>\r\n            </FormControl>\r\n        </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport {AppBar, Button, CircularProgress, Container, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackBar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {Route, Switch, Redirect, useHistory} from \"react-router-dom\";\r\nimport {TodolistList} from \"../features/Todolists/TodolistList\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/authReducer\";\r\n\r\ntype PropsType = {\r\n    demo?:boolean\r\n}\r\n\r\nexport type FilterType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistType = {\r\n    id: string;\r\n    title: string;\r\n    filter: FilterType;\r\n};\r\n\r\nfunction App({demo = false}:PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const handleClick = () => {\r\n        history.push(\"/\");\r\n    }\r\n\r\n    const onClickHandler = () => dispatch(logoutTC())\r\n\r\n    // if (!isInitialized) {\r\n    //     return <Login/>\r\n    // }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackBar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant={\"h6\"} onClick={handleClick}>\r\n                      TodoLists\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={onClickHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route exact path={'/'} render={() => <TodolistList  demo={demo}/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default App\r\n","import {combineReducers, createStore, applyMiddleware} from 'redux';\r\nimport {tasksReducer} from \"./tasks-reducers\";\r\nimport {todoListReducer} from \"./todolist-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../app/app-reducer\";\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n\r\n\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListReducer,\r\n    app:appReducer,\r\n    auth:authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport { HashRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
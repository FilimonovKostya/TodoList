{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trim","addItem","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","EditableSpan","editMode","setEditMode","onBlur","autoFocus","Todolist","newTitle","changeTodoListTitle","todoID","removeTodoList","tasks","map","f","id","type","checked","isDone","newIsDone","changeCheckbox","newValue","changeTaskTitle","removeTask","filter","changeFilter","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","setTasks","todoListID","todoListTasks","t","task","taskIsDone","find","todolistID","todoList","tl","newTodolistID","newTodoList","allTodoListTasks","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oQAMaA,G,MAAc,SAACC,GAAgC,IAAD,EAE/BC,mBAAS,IAFsB,mBAElDC,EAFkD,KAE3CC,EAF2C,OAG/BF,mBAAwB,MAHO,mBAGlDG,EAHkD,KAG3CC,EAH2C,KAOjDC,EAAU,WAERJ,EAAMK,QACNP,EAAMQ,QAAQN,EAAMK,QACpBJ,EAAS,IACTE,EAAS,QAETA,EAAS,qBACTF,EAAS,MAYjB,OACI,6BACI,2BAAOM,MAAOP,EACPQ,SAzBS,SAACC,GAAD,OAAsCR,EAASQ,EAAEC,cAAcH,QA0BxEI,WAZW,SAACF,GACvBN,EAAS,MAEK,UAAVM,EAAEG,KACFR,KASOS,UAAWX,EAAQ,QAAU,KAGpC,4BAAQY,QAASV,GAAjB,KAECF,GAAS,yBAAKW,UAAW,iBAAkBX,MCpCjD,SAASa,EAAajB,GAA+B,IAAD,EACzBC,oBAAS,GADgB,mBAClDiB,EADkD,KACxCC,EADwC,OAE/BlB,mBAAS,IAFsB,mBAElDC,EAFkD,KAE3CC,EAF2C,KAcvD,OAAOe,EACD,2BAAOT,MAAOP,EAAOQ,SAHE,SAACC,GAAD,OAAsCR,EAASQ,EAAEC,cAAcH,QAGjCW,OAPlC,WACrBD,GAAY,GACZnB,EAAMU,SAASR,IAKkEmB,WAAS,IACxF,0BAAML,QAZa,WACrBG,GAAY,GACZhB,EAASH,EAAME,SAUb,IAAmCF,EAAME,MAAzC,KCEH,SAASoB,EAAStB,GAcrB,OAAO,6BACH,gCAAK,kBAACiB,EAAD,CAAcf,MAAOF,EAAME,MAAOQ,SATf,SAACa,GACzBvB,EAAMwB,oBAAoBxB,EAAMyB,OAASF,MASrC,4BAAQP,QAAS,kBAAMhB,EAAM0B,eAAe1B,EAAMyB,UAAlD,MAEJ,6BACI,kBAAC,EAAD,CAAajB,QAjBL,SAACN,GACbF,EAAMM,QAAQJ,EAAOF,EAAMyB,YAkB3B,4BAEQzB,EAAM2B,MAAMC,KAAI,SAAAC,GAWZ,OACI,wBAAIf,IAAKe,EAAEC,IAAI,2BAAOC,KAAK,WAAWC,QAASH,EAAEI,OAAQvB,SAV/B,SAACC,GAC3B,IAAIuB,EAAYvB,EAAEC,cAAcoB,QAChChC,EAAMmC,eAAeN,EAAEC,GAAII,EAAWlC,EAAMyB,WASxC,kBAACR,EAAD,CAAcf,MAAO2B,EAAE3B,MAAOQ,SANhB,SAAC0B,GACnBpC,EAAMqC,gBAAgBR,EAAEC,GAAIM,EAAUpC,EAAMyB,WAMxC,4BAAQT,QAAS,kBAAMhB,EAAMsC,WAAWT,EAAEC,GAAI9B,EAAMyB,UAApD,UAMpB,6BACI,4BAAQV,UAA4B,QAAjBf,EAAMuC,OAAmB,SAAW,GAAIvB,QAlC3C,kBAAMhB,EAAMwC,aAAa,MAAOxC,EAAMyB,UAkCtD,OACA,4BAAQV,UAA4B,WAAjBf,EAAMuC,OAAsB,SAAW,GAAIvB,QAlC3C,kBAAMhB,EAAMwC,aAAa,SAAUxC,EAAMyB,UAkC5D,UACA,4BAAQV,UAA4B,cAAjBf,EAAMuC,OAAyB,SAAW,GAAIvB,QAlC5C,kBAAMhB,EAAMwC,aAAa,YAAaxC,EAAMyB,UAkCjE,e,YC2EGgB,MAvIf,WAAgB,IAAD,EAEPC,EAAcC,cACdC,EAAcD,cAHP,EAUqB1C,mBAA8B,CAC1D,CAAC6B,GAAIY,EAAaxC,MAAO,gBAAiBqC,OAAQ,OAClD,CAACT,GAAIc,EAAa1C,MAAO,cAAeqC,OAAQ,SAZzC,mBAUNM,EAVM,KAUKC,EAVL,OAea7C,oBAAQ,mBAC3ByC,EAAc,CACX,CAACZ,GAAIa,cAAMzC,MAAO,WAAY+B,QAAQ,GACtC,CAACH,GAAIa,cAAMzC,MAAO,KAAM+B,QAAQ,GAChC,CAACH,GAAIa,cAAMzC,MAAO,UAAW+B,QAAQ,GACrC,CAACH,GAAIa,cAAMzC,MAAO,MAAO+B,QAAQ,GACjC,CAACH,GAAIa,cAAMzC,MAAO,QAAS+B,QAAQ,GACnC,CAACH,GAAIa,cAAMzC,MAAO,SAAU+B,QAAQ,KAPZ,cAS3BW,EAAc,CACX,CAACd,GAAIa,cAAMzC,MAAO,OAAQ+B,QAAQ,GAClC,CAACH,GAAIa,cAAMzC,MAAO,QAAS+B,QAAQ,KAXX,IAfrB,mBAeNN,EAfM,KAeCoB,EAfD,KA8BX,SAAST,EAAWR,EAAYkB,GAC5B,IAAIC,EAAgBtB,EAAMqB,GAC1BrB,EAAMqB,GAAcC,EAAcV,QAAO,SAAAW,GAAC,OAAIA,EAAEpB,KAAOA,KACvDiB,EAAS,eAAIpB,IAGjB,SAASrB,EAAQJ,EAAe8C,GAC5B,IAAIG,EAAO,CAACrB,GAAIa,cAAMzC,MAAOA,EAAO+B,QAAQ,GACxCgB,EAAgBtB,EAAMqB,GAC1BrB,EAAMqB,GAAN,CAAqBG,GAArB,mBAA8BF,IAC9BF,EAAS,eAAIpB,IAIjB,SAASQ,EAAeL,EAAYsB,EAAqBJ,GACrD,IACIG,EADgBxB,EAAMqB,GACDK,MAAK,SAAAH,GAAC,OAAIA,EAAEpB,KAAOA,KACxCqB,IACAA,EAAKlB,OAASmB,EACdL,EAAS,eAAIpB,KAKrB,SAASa,EAAa/B,EAAmB6C,GACrC,IAAIC,EAAWV,EAAUQ,MAAK,SAAAG,GAAE,OAAIA,EAAG1B,KAAOwB,KAC1CC,IACAA,EAAShB,OAAS9B,EAClBqC,EAAa,YAAID,KAKzB,SAASR,EAAgBP,EAAYP,EAAkB+B,GACnD,IACIH,EADWxB,EAAM2B,GACDD,MAAK,SAAAxB,GAAC,OAAIA,EAAEC,KAAOA,KACnCqB,IACAA,EAAKjD,MAAQqB,EACbwB,EAAS,eAAIpB,KAIrB,SAASH,EAAoBM,EAAYP,GACrC,IAAMgC,EAAWV,EAAUQ,MAAK,SAAAxB,GAAC,OAAIA,EAAEC,KAAOA,KAC1CyB,IACAA,EAASrD,MAAQqB,EACjBuB,EAAa,YAAID,KAIzB,SAASnB,EAAeI,GACpBgB,EAAaD,EAAUN,QAAO,SAAAiB,GAAE,OAAIA,EAAG1B,KAAOA,aACvCH,EAAMG,GACbiB,EAAS,eAAIpB,IAiBjB,OACI,yBAAKZ,UAAU,OACX,kBAAC,EAAD,CAAaP,QAhBrB,SAAqBN,GACjB,IAAIuD,EAAgBd,cAChBe,EAA4B,CAC5B5B,GAAI2B,EACJvD,MAAOA,EACPqC,OAAQ,OAEZO,EAAa,GAAD,mBAAKD,GAAL,CAAgBa,KAC5BX,EAAS,2BACFpB,GADC,kBAEH8B,EAAgB,SAOhBZ,EAAUjB,KAAI,SAAA4B,GACX,IAAIG,EAAmBhC,EAAM6B,EAAG1B,IAC5B8B,EAAmBD,EAYvB,MATkB,WAAdH,EAAGjB,SACHqB,EAAmBD,EAAiBpB,QAAO,SAAAV,GAAC,OAAIA,EAAEI,WAGpC,cAAduB,EAAGjB,SACHqB,EAAmBD,EAAiBpB,QAAO,SAAAV,GAAC,OAAKA,EAAEI,WAIhD,kBAACX,EAAD,CAAUpB,MAAOsD,EAAGtD,MACVY,IAAK0C,EAAG1B,GACRL,OAAQ+B,EAAG1B,GACXJ,eAAgBA,EAChBW,gBAAiBA,EACjBV,MAAOiC,EACPtB,WAAYA,EACZE,aAAcA,EACdlC,QAASA,EACT6B,eAAgBA,EAChBI,OAAQiB,EAAGjB,OACXf,oBAAqBA,SC/HlCqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxE,GACLyE,QAAQzE,MAAMA,EAAM0E,a","file":"static/js/main.71bf01d3.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\n\n type AddItemFormPropsType = {\n     addItem: (title: string) => void\n }\n\nexport const AddItemForm = (props:AddItemFormPropsType) => {\n\n    let [title, setTitle] = useState('')\n    let [error, setError] = useState<string | null>(null)\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\n\n    const addTask = () => {\n\n        if (title.trim()) {\n            props.addItem(title.trim())\n            setTitle('')\n            setError(null)\n        } else {\n            setError('Title is required')\n            setTitle('')\n        }\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        setError(null)\n\n        if (e.key === 'Enter') {\n            addTask()\n        }\n    }\n\n    return (\n        <div>\n            <input value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   className={error ? 'error' : ''}\n            />\n\n            <button onClick={addTask}>+</button>\n\n            {error && <div className={'error-message'}>{error}</div>}\n        </div>\n    );\n};\n","import React, {ChangeEvent, useState} from \"react\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChange: (newValue: string) => void\n}\n\nexport function EditableSpan(props: EditableSpanPropsType) {\n    let [editMode, setEditMode] = useState(false)\n    let [title, setTitle] = useState('')\n\n    const activateEditMode = () => {\n        setEditMode(true)\n        setTitle(props.title)\n    }\n    const activateViewMode = () => {\n        setEditMode(false)\n        props.onChange(title)\n    }\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\n\n    return editMode\n        ? <input value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\n        : <span onClick={activateEditMode}> {props.title} </span>\n}","import React, {ChangeEvent} from 'react';\nimport {FilterType} from './App';\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype PropsType = {\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (id: string, todoListID: string) => void\n    changeFilter: (value: FilterType, todolistID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    changeCheckbox: (id: string, taskIsDone: boolean, todoListID: string) => void\n    todoID: string\n    filter: FilterType\n    removeTodoList: (id: string) => void\n    changeTaskTitle:(id: string, newTitle: string, todoListID: string) => void\n    changeTodoListTitle: (todoId: string , newTile: string) => void\n}\n\nexport function Todolist(props: PropsType) {\n\n    const addTask = (title: string) => {\n        props.addTask(title, props.todoID)\n    }\n\n    const changeTodoListTitle = (newTitle: string) => {\n        props.changeTodoListTitle(props.todoID , newTitle)\n    }\n\n    const changeFilterAll = () => props.changeFilter('all', props.todoID)\n    const changeFilterActive = () => props.changeFilter('active', props.todoID)\n    const changeFilterComplete = () => props.changeFilter('completed', props.todoID)\n\n    return <div>\n        <h3> <EditableSpan title={props.title} onChange={changeTodoListTitle} />\n            <button onClick={() => props.removeTodoList(props.todoID)}>X</button>\n        </h3>\n        <div>\n            <AddItemForm addItem={addTask}/>\n        </div>\n        <ul>\n            {\n                props.tasks.map(f => {\n\n                    const changeCheckboxHandler = (e: ChangeEvent<HTMLInputElement>) => {\n                        let newIsDone = e.currentTarget.checked\n                        props.changeCheckbox(f.id, newIsDone, props.todoID)\n                    }\n\n                    const onChangeTitle = (newValue:string) =>{\n                        props.changeTaskTitle(f.id, newValue, props.todoID)\n                    }\n\n                    return (\n                        <li key={f.id}><input type=\"checkbox\" checked={f.isDone} onChange={changeCheckboxHandler}/>\n                            <EditableSpan title={f.title} onChange={onChangeTitle} />\n                            <button onClick={() => props.removeTask(f.id, props.todoID)}>X</button>\n                        </li>\n                    )\n                })\n            }\n        </ul>\n        <div>\n            <button className={props.filter === 'all' ? 'button' : ''} onClick={changeFilterAll}>All</button>\n            <button className={props.filter === 'active' ? 'button' : ''} onClick={changeFilterActive}>Active</button>\n            <button className={props.filter === 'completed' ? 'button' : ''} onClick={changeFilterComplete}>Completed</button>\n        </div>\n    </div>\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Todolist, TaskType} from './Todolist';\nimport {v1} from 'uuid';\nimport {AddItemForm} from \"./AddItemForm\";\n\nexport type FilterType = 'all' | 'active' | 'completed'\ntype TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nfunction App() {\n\n    let todoListId1 = v1()\n    let todoListId2 = v1()\n\n    type TodolistType = {\n        id: string\n        title: string\n        filter: FilterType\n    }\n    let [todoLists, setTodoLists] = useState<Array<TodolistType>>([\n        {id: todoListId1, title: 'What to learn', filter: 'all'},\n        {id: todoListId2, title: 'What to buy', filter: 'all'}\n    ])\n\n    let [tasks, setTasks] = useState<TasksStateType>({\n        [todoListId1]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: true},\n            {id: v1(), title: \"ReactJS\", isDone: false},\n            {id: v1(), title: \"Sql\", isDone: true},\n            {id: v1(), title: \"Mocha\", isDone: true},\n            {id: v1(), title: \"Native\", isDone: false},\n        ],\n        [todoListId2]: [\n            {id: v1(), title: \"Milk\", isDone: true},\n            {id: v1(), title: \"Bread\", isDone: false},\n        ]\n    })\n\n    function removeTask(id: string, todoListID: string) {\n        let todoListTasks = tasks[todoListID] // достали нужный массив ТудуЛиста\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== id)//перезаписали  и оттфильтровали\n        setTasks({...tasks})//сетаем и перерерисовываем\n    }\n\n    function addTask(title: string, todoListID: string) {\n        let task = {id: v1(), title: title, isDone: false}\n        let todoListTasks = tasks[todoListID] // достали нужный\n        tasks[todoListID] = [task, ...todoListTasks] // перезапись\n        setTasks({...tasks}) // переррисовка\n    }\n\n\n    function changeCheckbox(id: string, taskIsDone: boolean, todoListID: string) {\n        let todoListTasks = tasks[todoListID]\n        let task = todoListTasks.find(t => t.id === id) //нашли нужную таску\n        if (task) {\n            task.isDone = taskIsDone // перезаписываем значение\n            setTasks({...tasks})//перерисока\n        }\n    }\n\n\n    function changeFilter(value: FilterType, todolistID: string) {\n        let todoList = todoLists.find(tl => tl.id === todolistID)\n        if (todoList) {\n            todoList.filter = value\n            setTodoLists([...todoLists])\n        }\n\n    }\n\n    function changeTaskTitle(id: string, newTitle: string, todolistID: string) {\n        let todoList = tasks[todolistID]\n        let task = todoList.find(f => f.id === id)\n        if (task) {\n            task.title = newTitle\n            setTasks({...tasks})\n        }\n    }\n\n    function changeTodoListTitle(id: string, newTitle: string) {\n        const todoList = todoLists.find(f => f.id === id)\n        if (todoList) {\n            todoList.title = newTitle\n            setTodoLists([...todoLists])\n        }\n    }\n\n    function removeTodoList(id: string) {\n        setTodoLists(todoLists.filter(tl => tl.id !== id))\n        delete tasks[id]\n        setTasks({...tasks})\n    }\n\n    function addTodoList(title: string) {\n        let newTodolistID = v1()\n        let newTodoList: TodolistType = {\n            id: newTodolistID,\n            title: title,\n            filter: 'all'\n        }\n        setTodoLists([...todoLists, newTodoList])\n        setTasks({\n            ...tasks,\n            [newTodolistID]: []\n        })\n    }\n\n    return (\n        <div className=\"App\">\n            <AddItemForm addItem={addTodoList}/>\n            {todoLists.map(tl => {\n                let allTodoListTasks = tasks[tl.id]\n                let tasksForTodolist = allTodoListTasks\n\n\n                if (tl.filter === 'active') {\n                    tasksForTodolist = allTodoListTasks.filter(f => f.isDone)\n\n                }\n                if (tl.filter === 'completed') {\n                    tasksForTodolist = allTodoListTasks.filter(f => !f.isDone)\n\n                }\n\n                return <Todolist title={tl.title}\n                                 key={tl.id}\n                                 todoID={tl.id}\n                                 removeTodoList={removeTodoList}\n                                 changeTaskTitle={changeTaskTitle}\n                                 tasks={tasksForTodolist}\n                                 removeTask={removeTask}\n                                 changeFilter={changeFilter}\n                                 addTask={addTask}\n                                 changeCheckbox={changeCheckbox}\n                                 filter={tl.filter}\n                                 changeTodoListTitle={changeTodoListTitle}\n                />\n            })}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
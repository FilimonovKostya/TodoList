{"version":3,"sources":["serviceWorker.ts","api/task-api.ts","api/todolist-api.ts","app/app-reducer.ts","state/todolist-reducer.ts","state/tasks-reducers.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/Todolist.tsx","features/Todolists/TodolistList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","app/App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatus","TaskPriorities","instance","Axios","create","baseURL","withCredentials","headers","todolistAPI","updateTodolist","todolistID","title","put","deleteTodoList","delete","createTodoList","post","getTodoList","get","initialState","status","error","setAppStatusAC","type","setAppErrorAC","createTodoListTC","dispatch","then","res","data","resultCode","todoListID","v1","addTodoListAC","messages","length","taskAPI","getTask","createTask","deleteTask","taskID","updateTitleTask","removeTaskAC","id","todoListId","changeTaskStatusAC","todolistId","changeTaskTitleAC","createTaskTC","task","item","addTaskAC","catch","message","AddItemForm","React","memo","props","useState","setTitle","setError","addTask","trim","addItem","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","key","helperText","disabled","IconButton","onClick","color","EditableSpan","editMode","setEditMode","onBlur","autoFocus","Task","useDispatch","onChangeTitle","useCallback","newValue","todoID","changeTaskTitle","Checkbox","checked","Completed","taskId","newIsDone","New","getState","tasks","find","t","action","aria-label","removeTask","Todolist","useEffect","items","setTaskAC","changeTodoListTitle","newTitle","changeFilterAll","changeFilter","changeFilterActive","changeFilterComplete","tasksForTodolist","filter","f","entifyStatus","removeTodoList","map","changeCheckbox","Button","TodolistList","todoLists","useSelector","state","todolists","app","thunk","changeTitleTodoListAC","removeTodoListAC","addTodoList","Grid","style","padding","container","spacing","tl","allTodolistTasks","Paper","elevation","entityStatus","Alert","ErrorSnackBar","setOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","className","AppBar","position","Toolbar","edge","LinearProgress","Container","fixed","rootReducer","combineReducers","copyState","forEach","newTodoList","addedDate","order","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.1956567f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import Axios from \"axios\";\r\nimport {ResponseType} from './todolist-api'\r\n\r\n\r\nexport enum TaskStatus {\r\n    New = 0,\r\n    Inprogress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatus\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype ResponseTaskType = {\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\ntype UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\nconst instance = Axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a918abd3-e56d-4f51-9680-86b073810b9f'\r\n    }\r\n})\r\n\r\n\r\nexport const taskAPI = () => {\r\n    return {\r\n        getTask(todoListID: string) {\r\n\r\n            return instance.get<ResponseTaskType>(`${todoListID}/tasks`)\r\n        },\r\n        createTask(todolistID: string, title: string) {\r\n\r\n            return instance.post<ResponseType<{ item: TaskType }>>(`${todolistID}/tasks`, {title})\r\n        },\r\n        deleteTask(todolistID: string, taskID: string) {\r\n            return instance.delete(`${todolistID}/tasks/${taskID}`)\r\n        },\r\n        updateTitleTask(todolistID: string, taskID: string, title: {}) {\r\n            return instance.put<UpdateTaskType>(`${todolistID}/tasks/${taskID}`, {title})\r\n        }\r\n    }\r\n}","import Axios from \"axios\";\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\nconst instance = Axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'a918abd3-e56d-4f51-9680-86b073810b9f'\r\n    }\r\n})\r\n\r\nexport const todolistAPI = () => {\r\n    return {\r\n        updateTodolist(todolistID: string, title: string) {\r\n            return instance.put<ResponseType<{}>>(`/${todolistID}`, {title})\r\n        },\r\n        deleteTodoList(todolistID: string) {\r\n            return instance.delete<ResponseType<{}>>(`/${todolistID}`)\r\n        },\r\n        createTodoList(title: string) {\r\n            return instance.post<ResponseType<{ item: TodoListType }>>(``, {title})\r\n        },\r\n        getTodoList() {\r\n            return instance.get<Array<TodoListType>>(``)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'loading',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setAppStatusAC> | ReturnType<typeof setAppErrorAC>","import {v1} from \"uuid\";\r\nimport {todolistAPI, TodoListType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\n\r\nexport type FilterType = \"all\" | \"active\" | \"completed\";\r\n\r\n\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type ActionType =\r\n    | ReturnType<typeof removeTodoListAC>\r\n    | ReturnType<typeof addTodoListAC>\r\n    | ReturnType<typeof changeTitleTodoListAC>\r\n    | ReturnType<typeof changeFilterTodoListAC>\r\n    | ReturnType<typeof setTodoListsAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nconst initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todoListReducer = (state: Array<TodoListDomainType> = initialState, action: ActionType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case \"SET-TODOLISTS\":\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(f => f.id !== action.todolistID)\r\n        case \"ADD-TODOLIST\" :\r\n            const newTodoList: TodoListDomainType = {id: action.todoListID, title: action.title, filter: \"all\", addedDate: '', order: 0, entityStatus: \"idle\"}\r\n            return [...state, newTodoList]\r\n        case 'CHANGING-TITLE-TODOLIST' :\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGED-FILTER-TODOLIST':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TODOLIST-ENTIFY-STATUS\":\r\n            return state.map(tl => tl.id === action.todoID ? {...tl, entityStatus: action.entifyStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTodoListAC = (todolistID: string) => ({type: \"REMOVE-TODOLIST\", todolistID} as const)\r\n\r\nexport const addTodoListAC = (title: string) => ({type: \"ADD-TODOLIST\", title, todoListID: v1()} as const)\r\n\r\nexport const changeTitleTodoListAC = (title: string, id: string) => ({type: \"CHANGING-TITLE-TODOLIST\", title, id} as const)\r\n\r\nexport const changeFilterTodoListAC = (filter: FilterType, id: string) => ({type: \"CHANGED-FILTER-TODOLIST\", filter, id} as const)\r\n\r\nexport const setTodoListsAC = (todoLists: TodoListType[]) => ({type: \"SET-TODOLISTS\", todoLists} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (entifyStatus: RequestStatusType, todoID: string) => ({\r\n    type: 'CHANGE-TODOLIST-ENTIFY-STATUS',\r\n    entifyStatus,\r\n     todoID\r\n} as const)\r\n\r\n//ThunkCreator\r\nexport const setTodoListsTC = () => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI().getTodoList()\r\n        .then(res => {\r\n            dispatch(setTodoListsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const removeTodoListTC = (todolistID: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC('loading', todolistID))\r\n    todolistAPI().deleteTodoList(todolistID)\r\n        .then(() => {\r\n            dispatch(removeTodoListAC(todolistID))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const createTodoListTC = (title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI().createTodoList(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodoListAC(title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some Error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}\r\n\r\nexport const changeTitleTodoListTC = (todolistID: string, title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI().updateTodolist(todolistID, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTitleTodoListAC(title, todolistID))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some Error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {taskAPI, TaskStatus, TaskType} from \"../api/task-api\";\r\nimport {FilterType, setTodoListsAC} from \"./todolist-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {TasksStateType} from \"../app/App\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setTodoListsAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof changeFilterTaskAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"SET-TASK\":\r\n            return {...state, [action.todoListID]: action.tasks}\r\n        case \"SET-TODOLISTS\": {\r\n            const copyState = {...state}\r\n            action.todoLists.forEach(tl => copyState[tl.id] = [])\r\n            return copyState\r\n        }\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case \"REMOVE-TASK\":\r\n            return {...state, [action.todoListID]: state[action.todoListID].filter(t => t.id !== action.id)}\r\n        case \"CHANGE-STATUS-TASK\":\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId].map(t => t.id === action.id ? {...t, status: action.status} : t)\r\n            }\r\n        case \"CHANGE-TITLE-TASK\":\r\n            return {\r\n                ...state, [action.todolistID]: state[action.todolistID].map(t => t.id === action.id ? {...t, title: action.title} : t)\r\n\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {\r\n                ...state, [action.todoListID]: []\r\n            }\r\n        case \"REMOVE-TODOLIST\":\r\n            delete state[action.id]\r\n            return {...state}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\n\r\nexport const removeTaskAC = (id: string, todoListId: string) => ({type: \"REMOVE-TASK\", id: id, todoListID: todoListId} as const)\r\n\r\nexport const changeTaskStatusAC = (todolistId: string, id: string, status: TaskStatus) => ({type: \"CHANGE-STATUS-TASK\", todolistId, id, status} as const)\r\n\r\nexport const changeTaskTitleAC = (todolistID: string, id: string, title: string) => ({type: \"CHANGE-TITLE-TASK\", todolistID, id, title} as const)\r\n\r\nexport const addTodolistAC = (title: string) => ({type: \"ADD-TODOLIST\", title, todoListID: v1()} as const)\r\n\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\n\r\nexport const changeFilterTaskAC = (id: string, todolistID: string, newFilter: FilterType) => ({type: \"CHANGE-FILTER-TASK\", todolistID, id, newFilter} as const)\r\n\r\nexport const setTaskAC = (todoListID: string, tasks: TaskType[]) => ({type: \"SET-TASK\", todoListID, tasks} as const)\r\n\r\n\r\n//THUNK CREATOR\r\nexport const setTaskTC = (todoListID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI().getTask(todoListID)\r\n        .then(res => {\r\n            const tasks = res.data.items\r\n            dispatch(setTaskAC(todoListID, tasks))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n\r\n}\r\n\r\nexport const removeTaskTC = (todoListID: string, taskID: string,) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI().deleteTask(todoListID, taskID)\r\n        .then(() => {\r\n            dispatch(removeTaskAC(taskID, todoListID))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n\r\n}\r\n\r\nexport const createTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI().createTask(title, todolistId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error occurred'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppErrorAC(error.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const changeTaskTitleTC = (todolistID: string, taskID: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI().updateTitleTask(todolistID, taskID, title)\r\n        .then((res) => {\r\n                dispatch(changeTaskTitleAC(todolistID, taskID, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, todolistId: string, status: TaskStatus) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task) {\r\n            dispatch(setAppStatusAC('loading'))\r\n            taskAPI().updateTitleTask(todolistId, taskId, status)\r\n                .then(() => {\r\n                    const action = changeTaskStatusAC(todolistId, taskId, status)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                })\r\n        }\r\n    }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled:boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    const addTask = () => {\r\n\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n            setError(null)\r\n        } else {\r\n            setError('Title is required')\r\n            setTitle('')\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n\r\n        if (e.key === 'Enter') {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField value={title}\r\n                       variant={\"outlined\"}\r\n                       label={'Type value'}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       disabled={props.disabled}\r\n            />\r\n\r\n            <IconButton onClick={addTask} color=\"primary\" disabled={props.disabled}>\r\n                <ControlPointIcon />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onClick={activateEditMode}> {props.title} </span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {TaskStatus, TaskType} from \"../../../../api/task-api\";\r\nimport {changeTaskTitleTC, updateTaskStatusTC} from \"../../../../state/tasks-reducers\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport type TaskPropsType = {\r\n    changeCheckbox: (id: string, status: TaskStatus, todoListID: string) => void\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todoListID: string) => void\r\n    todoID: string\r\n    task: TaskType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const changeCheckboxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDone = e.currentTarget.checked\r\n        // props.changeCheckbox(props.task.id, newIsDone ? TaskStatus.Completed : TaskStatus.New, props.todoID)\r\n        dispatch(updateTaskStatusTC(props.task.id, props.todoID, newIsDone ? TaskStatus.Completed : TaskStatus.New))\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeTitle = useCallback((newValue: string) => {\r\n        // props.changeTaskTitle(props.task.id, newValue, props.todoID)\r\n        dispatch(changeTaskTitleTC(props.todoID, props.task.id, newValue))\r\n\r\n    }, [props.task.id, props.todoID, props.changeTaskTitle])\r\n\r\n\r\n    return <div key={props.task.id}><Checkbox checked={props.task.status === TaskStatus.Completed} onChange={changeCheckboxHandler}/>\r\n        <EditableSpan title={props.task.title} onChange={onChangeTitle}/>\r\n        <IconButton aria-label=\"delete\">\r\n            <DeleteIcon onClick={() => props.removeTask(props.task.id, props.todoID)}/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback, useEffect} from 'react';\r\n\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatus, TaskType} from \"../../../api/task-api\";\r\nimport {FilterType} from '../../../state/todolist-reducer';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {createTaskTC, setTaskTC} from \"../../../state/tasks-reducers\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    entifyStatus:RequestStatusType\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeFilter: (value: FilterType, todolistID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeCheckbox: (id: string, status: TaskStatus, todoListID: string) => void\r\n    todoID: string\r\n    filter: FilterType\r\n    removeTodoList: (id: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todoListID: string) => void\r\n    changeTodoListTitle: (todoId: string, newTile: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(createTaskTC(props.todoID, title))\r\n                // props.addTask(props.todoID, title)\r\n    }, [])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(setTaskTC(props.todoID))\r\n    }, [])\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        props.changeTodoListTitle(props.todoID, newTitle)\r\n    }, [props.todoID, props.changeTodoListTitle])\r\n\r\n    const changeFilterAll = useCallback(() => props.changeFilter('all', props.todoID), [props.changeFilter, props.todoID])\r\n    const changeFilterActive = useCallback(() => props.changeFilter('active', props.todoID), [props.changeFilter, props.todoID])\r\n    const changeFilterComplete = useCallback(() => props.changeFilter('completed', props.todoID), [props.changeFilter, props.todoID])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter((f) => f.status === TaskStatus.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter((f) => f.status === TaskStatus.Completed);\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodoListTitle}/>\r\n            <IconButton aria-label=\"delete\" disabled={props.entifyStatus === 'loading'}>\r\n                <DeleteIcon onClick={() => props.removeTodoList(props.todoID)}/>\r\n            </IconButton>\r\n        </h3>\r\n        <div>\r\n            <AddItemForm addItem={addTask} disabled={props.entifyStatus === 'loading'}/>\r\n        </div>\r\n        <ul>\r\n            {\r\n                tasksForTodolist.map(f => <Task task={f}\r\n                                                changeCheckbox={props.changeCheckbox}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                removeTask={props.removeTask}\r\n                                                todoID={props.todoID}\r\n                                                key={f.id}\r\n                />)\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? 'contained' : 'text'} onClick={changeFilterAll}>All</Button>\r\n            <Button variant={props.filter === 'active' ? 'contained' : 'text'} color={\"primary\"}\r\n                    onClick={changeFilterActive}>Active</Button>\r\n            <Button variant={props.filter === 'completed' ? 'contained' : 'text'} color={\"secondary\"}\r\n                    onClick={changeFilterComplete}>Completed</Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {\r\n    changeFilterTodoListAC,\r\n    changeTitleTodoListTC,\r\n    createTodoListTC,\r\n    removeTodoListTC,\r\n    setTodoListsTC,\r\n    TodoListDomainType\r\n} from \"../../state/todolist-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {changeTaskStatusAC, changeTaskTitleAC, createTaskTC, removeTaskAC} from \"../../state/tasks-reducers\";\r\nimport {TaskStatus} from \"../../api/task-api\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {FilterType, TasksStateType} from \"../../app/App\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\nexport const TodolistList = () => {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTodoListsTC())\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((id: string, todoListID: string) => {\r\n        const thunk = removeTaskAC(id, todoListID)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((todoListID: string, title: string) => {\r\n        dispatch(createTaskTC(todoListID, title))\r\n    }, [dispatch])\r\n\r\n    const changeCheckbox = useCallback((id: string, status: TaskStatus, todoListID: string) => {\r\n        dispatch(changeTaskStatusAC(todoListID, id, status))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterType, todolistID: string) => {\r\n        dispatch(changeFilterTodoListAC(value, todolistID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistID: string) => {\r\n        dispatch(changeTaskTitleAC(todolistID, id, newTitle))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string, id: string) => {\r\n        dispatch(changeTitleTodoListTC(newTitle, id))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((id: string) => {\r\n        dispatch(removeTodoListTC(id))\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(createTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    return <>\r\n        <Grid style={{padding: '15px'}}>\r\n            <AddItemForm addItem={addTodoList} disabled={status === 'loading'} />\r\n        </Grid>\r\n        <Grid container={true} spacing={5}>\r\n            {\r\n                todoLists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    return (\r\n\r\n                        <Grid item={true} key={tl.id}> {/* //ячейки*/}\r\n                            <Paper style={{padding: '15px'}} elevation={3}>\r\n                                <Todolist entifyStatus={tl.entityStatus}\r\n                                          title={tl.title}\r\n                                          tasks={allTodolistTasks}\r\n                                          removeTask={removeTask}\r\n                                          changeFilter={changeFilter}\r\n                                          addTask={addTask}\r\n                                          changeCheckbox={changeCheckbox}\r\n                                          todoID={tl.id}\r\n                                          filter={tl.filter}\r\n                                          removeTodoList={removeTodoList}\r\n                                          changeTaskTitle={changeTaskTitle}\r\n                                          changeTodoListTitle={changeTodoListTitle}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n\r\n\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackBar() {\r\n    const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setOpen(false)\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport {TaskType} from \"../api/task-api\";\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar} from \"@material-ui/core\";\r\nimport {TodolistList} from \"../features/Todolists/TodolistList\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackBar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\n\r\nexport type FilterType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>;\r\n};\r\n\r\nexport type TodolistType = {\r\n    id: string;\r\n    title: string;\r\n    filter: FilterType;\r\n};\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackBar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistList/>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default App\r\n","import {combineReducers, createStore, applyMiddleware} from 'redux';\r\nimport {tasksReducer} from \"./tasks-reducers\";\r\nimport {todoListReducer} from \"./todolist-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../app/app-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n\r\n\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListReducer,\r\n    app:appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trim","addItem","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","color","EditableSpan","editMode","setEditMode","onBlur","autoFocus","Todolist","newTitle","changeTodoListTitle","todoID","aria-label","removeTodoList","tasks","map","f","id","Checkbox","checked","isDone","newIsDone","changeCheckbox","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","setTasks","todoListID","todoListTasks","t","task","taskIsDone","find","todolistID","todoList","tl","className","AppBar","position","Toolbar","edge","Typography","Container","fixed","Grid","container","style","padding","newTodolistID","newTodoList","spacing","allTodoListTasks","tasksForTodolist","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.aeee157a.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = (props: AddItemFormPropsType) => {\n\n    let [title, setTitle] = useState('')\n    let [error, setError] = useState<string | null>(null)\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\n\n    const addTask = () => {\n\n        if (title.trim()) {\n            props.addItem(title.trim())\n            setTitle('')\n            setError(null)\n        } else {\n            setError('Title is required')\n            setTitle('')\n        }\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        setError(null)\n\n        if (e.key === 'Enter') {\n            addTask()\n        }\n    }\n\n    return (\n        <div>\n            <TextField value={title}\n                       variant={\"outlined\"}\n                       label={'Type value'}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       error={!!error}\n                       helperText={error}\n            />\n\n            <IconButton onClick={addTask} color=\"primary\">\n                <ControlPointIcon/>\n            </IconButton>\n        </div>\n    );\n};\n","import React, {ChangeEvent, useState} from \"react\";\nimport {TextFields} from \"@material-ui/icons\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChange: (newValue: string) => void\n}\n\nexport function EditableSpan(props: EditableSpanPropsType) {\n    let [editMode, setEditMode] = useState(false)\n    let [title, setTitle] = useState('')\n\n    const activateEditMode = () => {\n        setEditMode(true)\n        setTitle(props.title)\n    }\n    const activateViewMode = () => {\n        setEditMode(false)\n        props.onChange(title)\n    }\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\n\n    return editMode\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\n        : <span onClick={activateEditMode}> {props.title} </span>\n}","import React, {ChangeEvent} from 'react';\nimport {FilterType} from './App';\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {CheckBox} from \"@material-ui/icons\";\n\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype PropsType = {\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (id: string, todoListID: string) => void\n    changeFilter: (value: FilterType, todolistID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    changeCheckbox: (id: string, taskIsDone: boolean, todoListID: string) => void\n    todoID: string\n    filter: FilterType\n    removeTodoList: (id: string) => void\n    changeTaskTitle: (id: string, newTitle: string, todoListID: string) => void\n    changeTodoListTitle: (todoId: string, newTile: string) => void\n}\n\nexport function Todolist(props: PropsType) {\n\n    const addTask = (title: string) => {\n        props.addTask(title, props.todoID)\n    }\n\n    const changeTodoListTitle = (newTitle: string) => {\n        props.changeTodoListTitle(props.todoID, newTitle)\n    }\n\n    const changeFilterAll = () => props.changeFilter('all', props.todoID)\n    const changeFilterActive = () => props.changeFilter('active', props.todoID)\n    const changeFilterComplete = () => props.changeFilter('completed', props.todoID)\n\n    return <div>\n        <h3><EditableSpan title={props.title} onChange={changeTodoListTitle}/>\n            <IconButton aria-label=\"delete\">\n                <DeleteIcon onClick={() => props.removeTodoList(props.todoID)}/>\n            </IconButton>\n        </h3>\n        <div>\n            <AddItemForm addItem={addTask}/>\n        </div>\n        <ul>\n            {\n                props.tasks.map(f => {\n\n                    const changeCheckboxHandler = (e: ChangeEvent<HTMLInputElement>) => {\n                        let newIsDone = e.currentTarget.checked\n                        props.changeCheckbox(f.id, newIsDone, props.todoID)\n                    }\n\n                    const onChangeTitle = (newValue: string) => {\n                        props.changeTaskTitle(f.id, newValue, props.todoID)\n                    }\n\n                    return (\n                        <div key={f.id}><Checkbox checked={f.isDone} onChange={changeCheckboxHandler}/>\n                            <EditableSpan title={f.title} onChange={onChangeTitle}/>\n                            <IconButton aria-label=\"delete\">\n                                <DeleteIcon onClick={() => props.removeTask(f.id, props.todoID)}/>\n                            </IconButton>\n                        </div>\n                    )\n                })\n            }\n        </ul>\n        <div>\n            <Button variant={props.filter === 'all' ? 'contained' : 'text'} onClick={changeFilterAll}>All</Button>\n            <Button variant={props.filter === 'active' ? 'contained' : 'text'} color={\"primary\"}\n                    onClick={changeFilterActive}>Active</Button>\n            <Button variant={props.filter === 'completed' ? 'contained' : 'text'} color={\"secondary\"}\n                    onClick={changeFilterComplete}>Completed</Button>\n        </div>\n    </div>\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { TaskType, Todolist } from \"./Todolist\";\nimport { v1 } from \"uuid\";\nimport { AddItemForm } from \"./AddItemForm\";\nimport {\n  AppBar,\n  Button,\n  Container,\n  Grid,\n  IconButton,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Paper from \"@material-ui/core/Paper\";\n\nexport type FilterType = \"all\" | \"active\" | \"completed\";\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>;\n};\n\n\nexport type TodolistType = {\n    id: string;\n    title: string;\n    filter: FilterType;\n  };\n\nfunction App() {\n  let todoListId1 = v1();\n  let todoListId2 = v1();\n\n  let [todoLists, setTodoLists] = useState<Array<TodolistType>>([\n    { id: todoListId1, title: \"What to learn\", filter: \"all\" },\n    { id: todoListId2, title: \"What to buy\", filter: \"all\" },\n  ]);\n\n  let [tasks, setTasks] = useState<TasksStateType>({\n    [todoListId1]: [\n      { id: v1(), title: \"HTML&CSS\", isDone: true },\n      { id: v1(), title: \"JS\", isDone: true },\n      { id: v1(), title: \"ReactJS\", isDone: false },\n      { id: v1(), title: \"Sql\", isDone: true },\n      { id: v1(), title: \"Mocha\", isDone: true },\n      { id: v1(), title: \"Native\", isDone: false },\n    ],\n    [todoListId2]: [\n      { id: v1(), title: \"Milk\", isDone: true },\n      { id: v1(), title: \"Bread\", isDone: false },\n    ],\n  });\n\n  function removeTask(id: string, todoListID: string) {\n    let todoListTasks = tasks[todoListID]; // достали нужный массив ТудуЛиста\n    tasks[todoListID] = todoListTasks.filter((t) => t.id !== id); //перезаписали  и оттфильтровали\n    setTasks({ ...tasks }); //сетаем и перерерисовываем\n  }\n\n  function addTask(title: string, todoListID: string) {\n    let task = { id: v1(), title: title, isDone: false };\n    let todoListTasks = tasks[todoListID]; // достали нужный\n    tasks[todoListID] = [task, ...todoListTasks]; // перезапись\n    setTasks({ ...tasks }); // переррисовка\n  }\n\n  function changeCheckbox(id: string, taskIsDone: boolean, todoListID: string) {\n    let todoListTasks = tasks[todoListID];\n    let task = todoListTasks.find((t) => t.id === id); //нашли нужную таску\n    if (task) {\n      task.isDone = taskIsDone; // перезаписываем значение\n      setTasks({ ...tasks }); //перерисока\n    }\n  }\n\n  function changeFilter(value: FilterType, todolistID: string) {\n    let todoList = todoLists.find((tl) => tl.id === todolistID);\n    if (todoList) {\n      todoList.filter = value;\n      setTodoLists([...todoLists]);\n    }\n  }\n\n  function changeTaskTitle(id: string, newTitle: string, todolistID: string) {\n    let todoList = tasks[todolistID];\n    let task = todoList.find((f) => f.id === id);\n    if (task) {\n      task.title = newTitle;\n      setTasks({ ...tasks });\n    }\n  }\n\n  function changeTodoListTitle(id: string, newTitle: string) {\n    const todoList = todoLists.find((f) => f.id === id);\n    if (todoList) {\n      todoList.title = newTitle;\n      setTodoLists([...todoLists]);\n    }\n  }\n\n  function removeTodoList(id: string) {\n    setTodoLists(todoLists.filter((tl) => tl.id !== id));\n    delete tasks[id];\n    setTasks({ ...tasks });\n  }\n\n  function addTodoList(title: string) {\n    let newTodolistID = v1();\n    let newTodoList: TodolistType = {\n      id: newTodolistID,\n      title: title,\n      filter: \"all\",\n    };\n\n    setTodoLists([...todoLists, newTodoList]);\n\n    setTasks({\n      ...tasks,\n      [newTodolistID]: [],\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\">News</Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n      <Container fixed>\n        <Grid container style={{ padding: \"10px\" }}>\n          <AddItemForm addItem={addTodoList} />\n        </Grid>\n        <Grid container spacing={3}>\n          {todoLists.map((tl) => {\n            let allTodoListTasks = tasks[tl.id];\n            let tasksForTodolist = allTodoListTasks;\n\n            if (tl.filter === \"active\") {\n              tasksForTodolist = allTodoListTasks.filter((f) => f.isDone);\n            }\n            if (tl.filter === \"completed\") {\n              tasksForTodolist = allTodoListTasks.filter((f) => !f.isDone);\n            }\n\n            return (\n              <Grid item>\n                <Paper style={{ padding: \"10px\" }}>\n                  <Todolist\n                    title={tl.title}\n                    key={tl.id}\n                    todoID={tl.id}\n                    removeTodoList={removeTodoList}\n                    changeTaskTitle={changeTaskTitle}\n                    tasks={tasksForTodolist}\n                    removeTask={removeTask}\n                    changeFilter={changeFilter}\n                    addTask={addTask}\n                    changeCheckbox={changeCheckbox}\n                    filter={tl.filter}\n                    changeTodoListTitle={changeTodoListTitle}\n                  />\n                </Paper>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
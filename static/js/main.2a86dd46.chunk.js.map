{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolist-reducer.ts","state/tasks-reducers.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addTask","trim","addItem","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","key","helperText","IconButton","onClick","color","EditableSpan","editMode","setEditMode","onBlur","autoFocus","Task","onChangeTitle","useCallback","newValue","changeTaskTitle","task","id","todoID","Checkbox","checked","isDone","newIsDone","changeCheckbox","aria-label","removeTask","Todolist","changeTodoListTitle","newTitle","changeFilterAll","changeFilter","changeFilterActive","changeFilterComplete","tasks","filter","f","removeTodoList","map","Button","initialState","AppWithRedux","todoLists","useSelector","state","todolists","dispatch","useDispatch","todoListID","todoListId","type","removeTaskAC","addTaskAC","taskIsDone","todolistId","todoLisId","changeTaskStatusAC","todolistID","newFilter","changeTaskTitleAC","changeTitleTodoListAC","addTodoList","v1","addTodoListAC","className","AppBar","position","Toolbar","edge","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","tasksForTodolist","item","Paper","rootReducer","combineReducers","action","todolist","nedTodo","todoListTasks","t","todolistTasks","newTodoList","changingTitle","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2a86dd46.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    const addTask = () => {\r\n\r\n        if (title.trim()) {\r\n            props.addItem(title.trim())\r\n            setTitle('')\r\n            setError(null)\r\n        } else {\r\n            setError('Title is required')\r\n            setTitle('')\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n\r\n        if (e.key === 'Enter') {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField value={title}\r\n                       variant={\"outlined\"}\r\n                       label={'Type value'}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       helperText={error}\r\n            />\r\n\r\n            <IconButton onClick={addTask} color=\"primary\">\r\n                <ControlPointIcon/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onClick={activateEditMode}> {props.title} </span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\ntype TaskPropsType = {\r\n    changeCheckbox: (id: string, taskIsDone: boolean, todoListID: string) => void\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todoListID: string) => void\r\n    todoID: string\r\n    task: TaskType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const changeCheckboxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDone = e.currentTarget.checked\r\n        props.changeCheckbox(props.task.id, newIsDone, props.todoID)\r\n    }\r\n\r\n    const onChangeTitle = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todoID)\r\n    }, [props.task.id, props.todoID, props.changeTaskTitle])\r\n\r\n\r\n    return <div key={props.task.id}><Checkbox checked={props.task.isDone} onChange={changeCheckboxHandler}/>\r\n        <EditableSpan title={props.task.title} onChange={onChangeTitle}/>\r\n        <IconButton aria-label=\"delete\">\r\n            <DeleteIcon onClick={() => props.removeTask(props.task.id, props.todoID)}/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {useCallback} from 'react';\r\nimport {FilterType} from './App';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {Task} from \"./Task\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todoListID: string) => void\r\n    changeFilter: (value: FilterType, todolistID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeCheckbox: (id: string, taskIsDone: boolean, todoListID: string) => void\r\n    todoID: string\r\n    filter: FilterType\r\n    removeTodoList: (id: string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todoListID: string) => void\r\n    changeTodoListTitle: (todoId: string, newTile: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todoID)\r\n    }, [props.addTask, props.todoID])\r\n\r\n    const changeTodoListTitle = useCallback((newTitle: string) => {\r\n        props.changeTodoListTitle(props.todoID, newTitle)\r\n    }, [props.todoID, props.changeTodoListTitle])\r\n\r\n    const changeFilterAll = useCallback(() => props.changeFilter('all', props.todoID), [props.changeFilter, props.todoID])\r\n    const changeFilterActive = useCallback(() => props.changeFilter('active', props.todoID), [props.changeFilter, props.todoID])\r\n    const changeFilterComplete = useCallback(() => props.changeFilter('completed', props.todoID), [props.changeFilter, props.todoID])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter((f) => f.isDone);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter((f) => !f.isDone);\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodoListTitle}/>\r\n            <IconButton aria-label=\"delete\">\r\n                <DeleteIcon onClick={() => props.removeTodoList(props.todoID)}/>\r\n            </IconButton>\r\n        </h3>\r\n        <div>\r\n            <AddItemForm addItem={addTask}/>\r\n        </div>\r\n        <ul>\r\n            {\r\n                props.tasks.map(f => <Task task={f}\r\n                                           changeCheckbox={props.changeCheckbox}\r\n                                           changeTaskTitle={props.changeTaskTitle}\r\n                                           removeTask={props.removeTask}\r\n                                           todoID={props.todoID}\r\n                                           key={f.id}\r\n                />)\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? 'contained' : 'text'} onClick={changeFilterAll}>All</Button>\r\n            <Button variant={props.filter === 'active' ? 'contained' : 'text'} color={\"primary\"}\r\n                    onClick={changeFilterActive}>Active</Button>\r\n            <Button variant={props.filter === 'completed' ? 'contained' : 'text'} color={\"secondary\"}\r\n                    onClick={changeFilterComplete}>Completed</Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import {FilterType, TodolistType} from \"./../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todoListID: string\r\n}\r\n\r\nexport type ChangingTitleTodolistActionType = {\r\n    type: 'CHANGING-TITLE-TODOLIST'\r\n    id: string\r\n    title: string\r\n}\r\n\r\nexport type ChangingFilterTodolistActionType = {\r\n    type: 'CHANGED-FILTER-TODOLIST'\r\n    id: string\r\n    newFilter: FilterType\r\n}\r\n\r\nexport type ActionType =\r\n    RemoveTodoListActionType\r\n    | AddTodolistActionType\r\n    | ChangingTitleTodolistActionType\r\n    | ChangingFilterTodolistActionType\r\n\r\nconst initialState:Array<TodolistType> =  []\r\n\r\nexport const todoListReducer = (state: Array<TodolistType> = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(f => f.id !== action.id)\r\n\r\n        case \"ADD-TODOLIST\" :\r\n            const newTodoList: TodolistType = {id: action.todoListID, title: action.title, filter: \"all\"}\r\n            return [...state, newTodoList]\r\n\r\n        case 'CHANGING-TITLE-TODOLIST' :\r\n            let changingTitle = state.find(f => f.id === action.id)\r\n            if (changingTitle) {\r\n                changingTitle.title = action.title\r\n            }\r\n            return [...state]\r\n\r\n        case 'CHANGED-FILTER-TODOLIST':\r\n            let todolist = state.find(f => f.id === action.id)\r\n            if (todolist) {\r\n                todolist.filter = action.newFilter\r\n            }\r\n            return [...state]\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTodoListAC = (todolistID: string): RemoveTodoListActionType => {\r\n    return {type: \"REMOVE-TODOLIST\", id: todolistID}\r\n}\r\n\r\nexport const addTodoListAC = (title: string): AddTodolistActionType => {\r\n    return {type: \"ADD-TODOLIST\", title: title, todoListID: v1()}\r\n}\r\n\r\nexport const changeTitleTodoListAC = (title: string, id: string): ChangingTitleTodolistActionType => {\r\n    return {type: \"CHANGING-TITLE-TODOLIST\", title: title, id: id}\r\n}\r\n\r\nexport const changeFilterTodoListAC = (filter: FilterType, id: string): ChangingFilterTodolistActionType => {\r\n    return {type: \"CHANGED-FILTER-TODOLIST\", newFilter: filter, id: id}\r\n}","import {FilterType, TasksStateType} from \"../App\";\r\nimport {TaskType} from \"../Todolist\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type AddTasksActionType = {\r\n    type: \"ADD-TASK\";\r\n    title: string;\r\n    id: string\r\n};\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: \"REMOVE-TASK\";\r\n    id: string;\r\n    todoListID: string\r\n};\r\n\r\nexport type ChangeTitleTaskActionType = {\r\n    type: \"CHANGE-TITLE-TASK\";\r\n    newTitle: string;\r\n    id: string;\r\n    todoListID: string\r\n};\r\n\r\nexport type ChangeFilterTaskActionType = {\r\n    type: \"CHANGE-FILTER-TASK\";\r\n    filter: FilterType;\r\n    id: string;\r\n    todoListID: string\r\n};\r\n\r\nexport type ChangeStatusTaskActionType = {\r\n    type: \"CHANGE-STATUS-TASK\";\r\n    todoLisId: string\r\n    isDone: boolean;\r\n    id: string;\r\n};\r\n\r\nexport type AddTodoListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todoListID: string\r\n}\r\n\r\nexport type RemoveTodoListActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\ntype ActionsType =\r\n    | AddTasksActionType\r\n    | RemoveTaskActionType\r\n    | ChangeTitleTaskActionType\r\n    | ChangeFilterTaskActionType\r\n    | ChangeStatusTaskActionType\r\n    | AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n\r\n        case 'ADD-TASK':\r\n            let task: TaskType = {id: v1(), title: action.title, isDone: false}\r\n            let todolist = state[action.id]\r\n            state[action.id] = [task, ...todolist]\r\n            return {...state}\r\n\r\n        case \"REMOVE-TASK\":\r\n            let nedTodo = state[action.todoListID]\r\n            state[action.todoListID] = nedTodo.map(f => f)\r\n            state[action.todoListID] = nedTodo.filter(f => f.id !== action.id)\r\n            return {...state}\r\n\r\n        case \"CHANGE-STATUS-TASK\": {\r\n            let todoListTasks = state[action.todoLisId]\r\n            state[action.todoLisId] = todoListTasks\r\n                .map(t => t.id === action.id\r\n                    ? {...t, isDone: action.isDone}\r\n                    : t)\r\n            return {...state}\r\n        }\r\n        case \"CHANGE-TITLE-TASK\": {\r\n            let todolistTasks = state[action.todoListID]\r\n            state[action.todoListID] = todolistTasks\r\n                .map(t => t.id === action.id\r\n                    ? {...t, title: action.newTitle}\r\n                    : t)\r\n            return ({...state})\r\n        }\r\n\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: []\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\":\r\n            delete state[action.id]\r\n            return {...state}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const addTaskAC = (title: string, id: string): AddTasksActionType => {\r\n    return {type: 'ADD-TASK', title: title, id: id}\r\n}\r\n\r\nexport const removeTaskAC = (id: string, todoListId: string): RemoveTaskActionType => {\r\n    return {type: \"REMOVE-TASK\", id: id, todoListID: todoListId}\r\n}\r\n\r\nexport const changeTaskStatusAC = (todolistId: string, id: string, isDone: boolean): ChangeStatusTaskActionType => {\r\n    return {type: \"CHANGE-STATUS-TASK\", todoLisId: todolistId, id: id, isDone: isDone}\r\n}\r\n\r\nexport const changeTaskTitleAC = (todolistID: string, id: string, title: string): ChangeTitleTaskActionType => {\r\n    return {type: \"CHANGE-TITLE-TASK\", todoListID: todolistID, id: id, newTitle: title}\r\n}\r\n\r\nexport const addTodolistAC = (title: string): AddTodoListActionType => {\r\n    return {type: \"ADD-TODOLIST\", title: title, todoListID: v1()}\r\n}\r\n\r\nexport const removeTodolistAC = (id: string): RemoveTodoListActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: id}\r\n}\r\n\r\nexport const changeFilterTaskAC = (id: string, todolistID: string, newFilter: FilterType): ChangeFilterTaskActionType => {\r\n    return {type: \"CHANGE-FILTER-TASK\", todoListID: todolistID, id: id, filter: newFilter}\r\n}","import React, {useCallback} from \"react\";\r\nimport \"./App.css\";\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    Toolbar,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {\r\n    addTodoListAC,\r\n    changeFilterTodoListAC,\r\n    changeTitleTodoListAC,\r\n    removeTodoListAC,\r\n    todoListReducer\r\n} from \"./state/todolist-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./state/tasks-reducers\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type FilterType = \"all\" | \"active\" | \"completed\";\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>;\r\n};\r\n\r\n\r\nexport type TodolistType = {\r\n    id: string;\r\n    title: string;\r\n    filter: FilterType;\r\n};\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((id: string, todoListID: string) => {\r\n        dispatch(removeTaskAC(id, todoListID))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskAC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeCheckbox = useCallback((id: string, taskIsDone: boolean, todoListID: string) => {\r\n        dispatch(changeTaskStatusAC(todoListID, id, taskIsDone))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterType, todolistID: string) => {\r\n        dispatch(changeFilterTodoListAC(value, todolistID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistID: string) => {\r\n        dispatch(changeTaskTitleAC(todolistID, id, newTitle))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((id: string, newTitle: string) => {\r\n        dispatch(changeTitleTodoListAC(newTitle, id))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((id: string) => {\r\n        dispatch(removeTodoListAC(id))\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodoListAC(title))\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">News</Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"10px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map((tl) => {\r\n                        let allTodoListTasks = tasks[tl.id];\r\n                        let tasksForTodolist = allTodoListTasks;\r\n\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        title={tl.title}\r\n                                        key={tl.id}\r\n                                        todoID={tl.id}\r\n                                        removeTodoList={removeTodoList}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeCheckbox={changeCheckbox}\r\n                                        filter={tl.filter}\r\n                                        changeTodoListTitle={changeTodoListTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        );\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from \"./tasks-reducers\";\r\nimport {todoListReducer} from \"./todolist-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n\r\n\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer, todolists: todoListReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithReducers from \"./AppWithReducers\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
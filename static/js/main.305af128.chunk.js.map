{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","addTask","trim","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","tasks","map","f","id","type","checked","isDone","removeTask","changeFilter","App","v1","setTasks","filter","setFilter","tasksForTodolist","d","newAddTask","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4PAiBO,SAASA,EAASC,GAAmB,IAAD,EAEfC,mBAAS,IAFM,mBAElCC,EAFkC,KAE3BC,EAF2B,OAGhBF,mBAAwB,MAHR,mBAGlCG,EAHkC,KAG5BC,EAH4B,KAKjCC,EAAU,WACRJ,EAAMK,QACPP,EAAMM,QAAQJ,EAAMK,QACnBJ,EAAS,IACTE,EAAS,OAEVA,EAAS,kEAiBhB,OAAO,6BACH,4BAAKL,EAAME,OACX,6BACI,2BAAOM,MAAON,EAAOO,SAhBL,SAACC,GAAD,OAAsCP,EAASO,EAAEC,cAAcH,QAgB/BI,WAd9B,SAACF,GACvBL,EAAS,MACK,UAAVK,EAAEG,KACFP,KAW+EQ,UAAWV,EAAQ,QAAU,KAC5G,4BAAQW,QAAST,GAAjB,KACCF,GAAS,yBAAKU,UAAW,iBAAkBV,IAEhD,4BAEQJ,EAAMgB,MAAMC,KAAI,SAAAC,GACZ,OACI,wBAAIL,IAAKK,EAAEC,IAAI,2BAAOC,KAAK,WAAWC,QAASH,EAAEI,SAAS,8BAAOJ,EAAEhB,OAC/D,4BAAQa,QAAS,kBAAMf,EAAMuB,WAAWL,EAAEC,MAA1C,UAMpB,6BACI,4BAAQJ,QAvBQ,kBAAMf,EAAMwB,aAAa,SAuBzC,OACA,4BAAQT,QAvBW,kBAAMf,EAAMwB,aAAa,YAuB5C,UACA,4BAAQT,QAvBa,kBAAMf,EAAMwB,aAAa,eAuB9C,e,YCTGC,MAlDf,WAAgB,IAAD,EAEaxB,mBAA0B,CAC1C,CAACkB,GAAIO,cAAMxB,MAAO,WAAYoB,QAAQ,GACtC,CAACH,GAAIO,cAAMxB,MAAO,KAAMoB,QAAQ,GAChC,CAACH,GAAIO,cAAMxB,MAAO,UAAWoB,QAAQ,GACrC,CAACH,GAAIO,cAAMxB,MAAO,MAAOoB,QAAQ,GACjC,CAACH,GAAIO,cAAMxB,MAAO,QAASoB,QAAQ,GACnC,CAACH,GAAIO,cAAMxB,MAAO,SAAUoB,QAAQ,KARjC,mBAENN,EAFM,KAECW,EAFD,OAuBe1B,mBAAqB,OAvBpC,mBAuBN2B,EAvBM,KAuBEC,EAvBF,KAyBPC,EAAmBd,EAkBvB,MAfe,WAAXY,IACAE,EAAmBd,EAAMY,QAAO,SAAAV,GAAC,OAAIA,EAAEI,WAG5B,cAAXM,IACAE,EAAmBd,EAAMY,QAAO,SAAAV,GAAC,OAAKA,EAAEI,WAWxC,yBAAKR,UAAU,OACX,kBAACf,EAAD,CAAUG,MAAM,gBAAgBc,MAAOc,EAAkBP,WAjCjE,SAAoBJ,GAChBQ,EAASX,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAEZ,KAAOA,OAgCiDK,aARzF,SAAsBhB,GAElBqB,EAAUrB,IAMuGF,QA7BrH,SAAiBJ,GACb,IACI8B,EAAU,CADH,CAACb,GAAIO,cAAMxB,MAAOA,EAAOoB,QAAQ,IAC9B,mBAAYN,IAC1BW,EAASK,QCdGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,a","file":"static/js/main.305af128.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {FilterType} from './App';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string) => void\r\n    changeFilter: (value: FilterType) => void\r\n    addTask: (task: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error,setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim()) {\r\n           props.addTask(title.trim())\r\n            setTitle('')\r\n            setError(null)\r\n        } else{\r\n           setError('Введите имя')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === 'Enter') {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    const changeFilterAll = () => props.changeFilter('all')\r\n    const changeFilterActive = () => props.changeFilter('active')\r\n    const changeFilterComplete = () => props.changeFilter('completed')\r\n\r\n    return <div>\r\n        <h3>{props.title}</h3>\r\n        <div>\r\n            <input value={title} onChange={onChangeHandler} onKeyPress={onKeyPressHandler} className={error ? 'error' : ''}/>\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className={'error-message'}>{error}</div>}\r\n        </div>\r\n        <ul>\r\n            {\r\n                props.tasks.map(f => {\r\n                    return (\r\n                        <li key={f.id}><input type=\"checkbox\" checked={f.isDone}/><span>{f.title}</span>\r\n                            <button onClick={() => props.removeTask(f.id)}>X</button>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button onClick={changeFilterAll}>All</button>\r\n            <button onClick={changeFilterActive}>Active</button>\r\n            <button onClick={changeFilterComplete}>Completed</button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist, TaskType} from './Todolist';\r\nimport { v1 } from 'uuid';\r\n\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nfunction App() {\r\n\r\n    let [tasks, setTasks] = useState<Array<TaskType>>([\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Sql\", isDone: true},\r\n            {id: v1(), title: \"Mocha\", isDone: true},\r\n            {id: v1(), title: \"Native\", isDone: false},\r\n        ]\r\n    )\r\n\r\n    function removeTask(id: string) {\r\n        setTasks(tasks.filter(d => d.id !== id))\r\n    }\r\n\r\n    function addTask(title: string) {\r\n        let task = {id: v1(), title: title, isDone: false}\r\n        let newAddTask = [task,...tasks]\r\n        setTasks(newAddTask)\r\n\r\n    }\r\n\r\n    let [filter, setFilter] = useState<FilterType>('all')\r\n\r\n    let tasksForTodolist = tasks\r\n\r\n\r\n    if (filter === 'active') {\r\n        tasksForTodolist = tasks.filter(f => f.isDone)\r\n\r\n    }\r\n    if (filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(f => !f.isDone)\r\n\r\n    }\r\n\r\n    function changeFilter(value: FilterType) {\r\n\r\n        setFilter(value)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist title=\"What to learn\" tasks={tasksForTodolist} removeTask={removeTask} changeFilter={changeFilter} addTask={addTask}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}